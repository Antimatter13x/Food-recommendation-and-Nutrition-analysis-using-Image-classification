# -*- coding: utf-8 -*-
"""ML Model CIP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HuQrZubo3FYbwskBRR1hVoIZPgBAH9JN

# Image classification

## Introduction

Here we are creating our ML model which we will later integrate with our android application

## Importing necessary libraries
"""

import tensorflow as tf
tf.__version__

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator

import os
import numpy as np
import matplotlib.pyplot as plt

import plotly.io as pio
pio.templates.default = 'plotly_white'

"""## Importing the dataset from Google Drive"""

!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

from google.colab import drive
drive.mount('/content/drive')

"""## Setting up paths for testing and training """

PATH = '/content/drive/MyDrive/Programs/CIP'

os.listdir(PATH)

train_dir = os.path.join(PATH, 'Train')
test_dir = os.path.join(PATH, 'Test')

"""## Preprocessing the data"""

IMG_HEIGHT = 212
IMG_WIDTH = 212
batch_size = 32

image_gen = ImageDataGenerator(
    rescale=1./255
    )

train_data_gen = image_gen.flow_from_directory(
    #batch_size=batch_size,
    directory=train_dir,
    shuffle=True,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    class_mode='categorical')

test_data_gen = image_gen.flow_from_directory(
    #batch_size=batch_size,
    directory=test_dir,
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    class_mode='categorical')

sample_training_images, _ = next(train_data_gen)

# This function will plot images in the form of a grid with 1 row and 5 columns where images are placed in each column.
def plotImages(images_arr):
    fig, axes = plt.subplots(1, 3, figsize=(20,20))
    axes = axes.flatten()
    for img, ax in zip( images_arr, axes):
        ax.imshow(img)
        ax.axis('off')
    plt.tight_layout()
    plt.show()

plotImages(sample_training_images[:3])

"""## Creating the neural network"""

model = Sequential([
    Conv2D(16, 3, padding='same', activation='relu', input_shape=(IMG_HEIGHT, IMG_WIDTH, 3)),
    MaxPooling2D(),
    Dropout(0.2),
    Conv2D(32, 3, padding='same', activation='relu'),
    MaxPooling2D(),
    Conv2D(64, 3, padding='same', activation='relu'),
    MaxPooling2D(),
    Dropout(0.2),
    Conv2D(128, 3, padding='same', activation='relu'),
    MaxPooling2D(),
    Dropout(0.2),
    Conv2D(128, 3, padding='same', activation='relu'),
    MaxPooling2D(),
    Dropout(0.2),
    Flatten(),
    Dense(512, activation='relu'),
    Dense(14, activation='softmax')
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

"""## Model Summary"""

model.summary()

"""## Training the model"""

batch_size = 32
epochs = 20

history = model.fit_generator(
    train_data_gen,
    steps_per_epoch= 410 // batch_size,
    epochs=epochs,
    validation_data=test_data_gen,
    validation_steps= 98 // batch_size,
    callbacks = [tf.keras.callbacks.EarlyStopping(
        monitor='val_loss',
        min_delta=0.01,
        patience=7
    )]
)

"""##Plotting accuracy graph"""

import plotly.graph_objects as go
fig = go.Figure()

fig.add_trace(go.Scatter(x=history.epoch,
                         y=history.history['accuracy'],
                         mode='lines+markers',
                         name='Training accuracy'))
fig.add_trace(go.Scatter(x=history.epoch,
                         y=history.history['val_accuracy'],
                         mode='lines+markers',
                         name='Validation accuracy'))
fig.update_layout(title='Accuracy',
                  xaxis=dict(title='Epoch'),
                  yaxis=dict(title='Percentage'))
fig.show()

"""## Saving the model"""

save_path = F'/content/drive/My Drive/Programs/CIP/Model/'

model.save_weights(os.path.join(PATH, 'tf_model.h5'))

model_json = model.to_json()

with open(os.path.join(PATH, 'tf_model.json'), 'w') as json_file:
  json_file.write(model_json)

json_file.close()

"""##Converting TF Model to TFlite model"""

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

img=image.load_img('drive/MyDrive/Programs/CIP/Demo/Testing.jpg')

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()
open("ML_model","wb").write(tflite_model)

import tensorflow as tf
#model=tf.keras.models.load_model("/path_to_model/generator_model.h5")
converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.experimental_new_converter = True
tflite_model = converter.convert()
open("drive/MyDrive/Programs/CIP/converted_model.tflite", "wb").write(tflite_model)

!pwd